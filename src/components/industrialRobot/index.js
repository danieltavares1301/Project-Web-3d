/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 industrial_robot.glb
Author: jacuo777 (https://sketchfab.com/jacuo777)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/industrial-robot-e5e6703e7788417e9761eb4dc516de5a
Title: Industrial Robot
*/

import { useGLTF, Text } from "@react-three/drei";
import { useSpring, a } from "@react-spring/three";
import BaseBraco from "./1-baseBraco";
import BaseMeioB from "./3-baseMeioB";
import BaseMeioA from "./2-baseMeioA";

const TextObj = ({ isClicked, X, Y, Z, text, scale, rotation }) => {
  return (
    <Text
      scale={scale}
      color="white" // default
      anchorX="center" // default
      anchorY="middle" // default
      position={[X, Y, Z]}
      visible={isClicked}
      rotation={rotation}
    >
      {text}
    </Text>
  );
};

export function IndustrialRobot({
  baseClicked,
  setBaseClicked,
  cilindroBaseClicked,
  setCilindroBaseClicked,
  cilindroPecaPrincClicked,
  setCilindroPecaPrincClicked,
  pecaRetaBracoClicked,
  setPecaRetaBracoClicked,
  ganchoBracoClicked,
  setGanchoBracoClicked,
  visibledAll,
  setVisibledAll,
  showPecas,
  setShowPecas,
  baseMeioClicked,
  setBaseMeioClicked,
}) {
  const { nodes, materials } = useGLTF("/industrial_robot.glb");

  const baseSpring = useSpring({
    position: showPecas ? [0, -19.6, 0] : [0, -6.6, 0],
    scale: baseClicked || !visibledAll ? 100 : 0,
  });

  const cilindroBaseSpring = useSpring({
    position: showPecas ? [-0.11, 0.1, 0.24] : [-0.11, 0.1, 0.14],
    scale: cilindroBaseClicked || !visibledAll ? 1 : 0,
  });

  const cilindroPecaPrincSpring = useSpring({
    position: showPecas ? [-0.15, -0.17, 0.24] : [0.02, -0.17, 0.24],
    scale: cilindroPecaPrincClicked || !visibledAll ? 1 : 0,
  });

  const pecaRetaBracoSpring = useSpring({
    position: showPecas ? [-5.91, 66.94, -31.83] : [5.91, 66.94, -31.83],
    scale: pecaRetaBracoClicked || !visibledAll ? 100 : 0,
  });

  const ganchoBracoSpring = useSpring({
    position: showPecas ? [-14.11, 75.34, 56.28] : [-3.11, 75.34, 46.28],
    scale: ganchoBracoClicked || !visibledAll ? 100 : 0,
  });

  const baseMeioASpring = useSpring({
    scale: baseMeioClicked || !visibledAll ? 1 : 0,
  });

  const baseMeioBSpring = useSpring({
    scale: baseMeioClicked || !visibledAll ? 100 : 0,
  });

  return (
    <group dispose={null}>
      <group scale={0.5}>
        <BaseBraco
          nodes={nodes}
          materials={materials}
          TextObj={TextObj}
          baseClicked={baseClicked}
          setBaseClicked={setBaseClicked}
          baseSpring={baseSpring}
          visibledAll={visibledAll}
        />
        <group
          position={[0.33, 12.67, 0.33]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        >
          {/* cilindro da base  */}
          <a.group
            position={cilindroBaseSpring.position}
            scale={cilindroBaseSpring.scale}
            onClick={() => {
              setCilindroBaseClicked(true);
            }}
          >
            <mesh
              geometry={nodes.engine2_low_Engine_0.geometry}
              material={materials.Engine}
            >
              <TextObj
                X={-0.55}
                Y={0}
                Z={0.1}
                isClicked={
                  cilindroBaseClicked && (cilindroBaseClicked || !visibledAll)
                }
                text={"Cilindro XYZ 1"}
                scale={[1.3, 1.3, 1.3]}
                rotation={[1.6, 3.1, 0]}
              />
            </mesh>
            <mesh
              geometry={nodes.Cylinder004_Engine_0.geometry}
              material={materials.Engine}
            />
          </a.group>
          {/* cilindro peça principal*/}
          <a.group
            position={cilindroPecaPrincSpring.position}
            rotation={[-Math.PI / 2, -Math.PI / 2, 0]}
            scale={cilindroPecaPrincSpring.scale}
            onClick={() => {
              setCilindroPecaPrincClicked(true);
            }}
          >
            <mesh
              geometry={nodes.engine_low_Engine_0.geometry}
              material={materials.Engine}
            >
              <TextObj
                X={-0.55}
                Y={0}
                Z={0.15}
                isClicked={
                  cilindroPecaPrincClicked &&
                  (cilindroPecaPrincClicked || !visibledAll)
                }
                text={"Cilindro Horizontal XYZ"}
                scale={[0.9, 1.1, 1.1]}
                rotation={[0, 0, -Math.PI / 1]}
              />
            </mesh>
            <mesh
              geometry={nodes.Cylinder005_Engine_0.geometry}
              material={materials.Engine}
            />
          </a.group>
          <BaseMeioA
            TextObj={TextObj}
            baseMeioASpring={baseMeioASpring}
            baseMeioClicked={baseMeioClicked}
            materials={materials}
            nodes={nodes}
            setBaseMeioClicked={setBaseMeioClicked}
            visibledAll={visibledAll}
          />
        </group>
        <BaseMeioB
          baseMeioBSpring={baseMeioBSpring}
          materials={materials}
          nodes={nodes}
          setBaseMeioClicked={setBaseMeioClicked}
        />
        {/* parte reta de cima do braço*/}
        <a.group
          position={pecaRetaBracoSpring.position}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={pecaRetaBracoSpring.scale}
          onClick={() => {
            setPecaRetaBracoClicked(true);
          }}
        >
          <mesh
            geometry={nodes.arm2_low_arm_0.geometry}
            material={materials.material}
          >
            <TextObj
              X={-0.35}
              Y={0}
              Z={0}
              isClicked={
                pecaRetaBracoClicked && (pecaRetaBracoClicked || !visibledAll)
              }
              text={"Braço"}
              scale={[1.1, 1.1, 1.1]}
              rotation={[1.65, 0, 0]}
            />
          </mesh>
          <mesh
            geometry={nodes.screw5_low_arm_0.geometry}
            material={materials.material}
            position={[-0.09, -0.16, 0.08]}
            rotation={[-Math.PI / 2, 0, -Math.PI / 2]}
          />
          <mesh
            geometry={nodes.wire4_low_arm_0.geometry}
            material={materials.material}
            position={[-0.15, -0.02, 0.07]}
            rotation={[0, 0, -1.22]}
          />
          <mesh
            geometry={nodes.wire5_low_arm_0.geometry}
            material={materials.material}
            position={[-0.15, -0.02, 0.05]}
            rotation={[0, 0, -1.22]}
          />
          <mesh
            geometry={nodes.wire6_low_arm_0.geometry}
            material={materials.material}
            position={[-0.16, -0.03, -0.01]}
            rotation={[0, 0, -1.22]}
          />
          <mesh
            geometry={nodes.wire7_low_arm_0.geometry}
            material={materials.material}
            position={[-0.15, -0.03, -0.02]}
            rotation={[0, 0, -1.22]}
          />
          <mesh
            geometry={nodes.screw6_low_arm_0.geometry}
            material={materials.material}
            position={[-0.09, -0.7, 0.08]}
            rotation={[-Math.PI / 2, 0, -Math.PI / 2]}
          />
          <mesh
            geometry={nodes.wire8_low_arm_0.geometry}
            material={materials.material}
            position={[-0.03, -0.12, 0.06]}
            rotation={[0, 0, -1.22]}
          />
          <mesh
            geometry={nodes.electricbox_low_arm_0.geometry}
            material={materials.material}
            position={[-0.05, 0.01, 0.13]}
          />
          <mesh
            geometry={nodes.engine5_low_Engine_0.geometry}
            material={materials.Engine}
            position={[-0.06, 0, 0]}
            rotation={[-Math.PI / 2, -Math.PI / 2, 0]}
            scale={0.69}
          />
          <mesh
            geometry={nodes.engine4_low_Engine_0.geometry}
            material={materials.Engine}
            position={[-0.13, -0.09, 0.06]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={0.6}
          />
          <mesh
            geometry={nodes.engine3_low_Engine_0.geometry}
            material={materials.Engine}
            position={[-0.13, -0.09, 0.12]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={0.6}
          />
        </a.group>
        <a.group
          position={ganchoBracoSpring.position}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={ganchoBracoSpring.scale}
          onClick={() => {
            setGanchoBracoClicked(true);
          }}
        >
          <mesh
            geometry={nodes.ToolRotation_low_tool_0.geometry}
            material={materials.tool}
          >
            <TextObj
              X={-0.35}
              Y={0}
              Z={0}
              isClicked={
                ganchoBracoClicked && (ganchoBracoClicked || !visibledAll)
              }
              text={"Gancho"}
              scale={[1.1, 1.1, 1.1]}
              rotation={[1.4, 0, 0]}
            />
          </mesh>
          <mesh
            geometry={nodes.Tool_low_tool_0.geometry}
            material={materials.tool}
          />
        </a.group>
      </group>
    </group>
  );
}

useGLTF.preload("/industrial_robot.glb");
